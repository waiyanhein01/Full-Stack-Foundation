generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  posts    Post[]
  products Product[]
}

model Image {
  id        Int     @id @default(autoincrement())
  path      String
  productId Int
  products  Product @relation(fields: [productId], references: [id])
}

model Order {
  id              Int               @id @default(autoincrement())
  userId          Int
  code            String
  totalPrice      Decimal           @db.Decimal(10, 2)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  users           User              @relation(fields: [userId], references: [id])
  productOnOrders ProductOnOrders[]
}

model Otp {
  id            Int      @id @default(autoincrement())
  phone         String   @db.VarChar(15)
  otp           String   @db.VarChar(6)
  rememberToken String
  verifyToken   String?
  count         Int      @default(0) @db.SmallInt
  error         Int      @default(0) @db.SmallInt
  code          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  content    String
  body       String
  image      String
  authorId   Int
  categoryId Int
  typeId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  author     User     @relation(fields: [authorId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  type       Type     @relation(fields: [typeId], references: [id])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String
  price           Decimal           @db.Decimal(10, 2)
  discount        Decimal           @default(0) @db.Decimal(10, 2)
  rating          Int               @default(0) @db.SmallInt
  inventory       Int
  status          Status            @default(ACTIVE)
  categoryId      Int
  typeId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  Image           Image[]
  category        Category          @relation(fields: [categoryId], references: [id])
  type            Type              @relation(fields: [typeId], references: [id])
  productOnOrders ProductOnOrders[]
}

model ProductOnOrders {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  price     Decimal @db.Decimal(10, 2)
  quantity  Int     @db.SmallInt
  orders    Order   @relation(fields: [orderId], references: [id])
  products  Product @relation(fields: [productId], references: [id])
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(52)
  taggable Taggable[]
}

model Taggable {
  id     Int    @id @default(autoincrement())
  tagId  Int
  type   String @db.VarChar(7)
  typeId Int
  tag    Tag    @relation(fields: [tagId], references: [id])
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  posts    Post[]
  products Product[]
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String?   @db.VarChar(52)
  lastName   String?   @db.VarChar(52)
  phone      String    @db.VarChar(15)
  email      String?   @unique @db.VarChar(52)
  password   String
  role       Role      @default(USER)
  status     Status    @default(ACTIVE)
  lastLogin  DateTime?
  errorCount Int       @default(0) @db.SmallInt
  randToken  String
  image      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  orders     Order[]
  posts      Post[]
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}
